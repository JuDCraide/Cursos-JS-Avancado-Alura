{"version":3,"sources":["../../app-es6/lib/datex.js"],"names":["DataHelper","data","texto"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOMA,sB;;;;;;;kDAEYC,I,EAAM,CAAC,cAAe;;;kDAEtBC,K,EAAO,CAAC,cAAe","file":"datex.js","sourcesContent":["//vamos supor que baixamor uma biblioteca da internet chamada datex\r\n//dentro dela temos a definição de uma classe DataHelper\r\n//se importarmos esse script assim com está no final index.js teremos um erro\r\n//pois essa classe sobrescreverá o nosso DataHelper\r\n// ** na verdade atualmente o Node.js já resolveu este problema adotando padrão CommonJS ao invés do AMD (Assincronous Module Definition) **\r\n//mas vamos resolver isso usando o sistema de módulos do ECMAScript2015, ou seja usando export e import\r\n//vamos precisar de uma biblioteca que funcione como loader, então vamos usar a famosa System JS, baixando pelo npm\r\nclass DataHelper {\r\n\r\n    dataParaTexto(data) {/* faz algo */}\r\n\r\n    textoParaData(texto) {/* faz algo */}\r\n\r\n}"]}